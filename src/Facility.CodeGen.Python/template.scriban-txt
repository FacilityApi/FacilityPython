{{ func WriteFieldValue # $0 source depth ~}}{{ if $0.Kind == 9 }}{{ $0.Dto.Name }}.from_data({{ $1 }}){{ else if $0.Kind == 8 ~}}facility.Error.from_data({{ $1 }}){{ else if $0.Kind == 11 && $0.Dto  ~}}facility.Result(value={{ WriteFieldValue $0.Dto $1 $2+1 }}){{ else if $0.Kind == 11 && $0.ValueType ~}}facility.Result(value={{ WriteFieldValue $0.ValueType $1 $2+1 }}){{ else if $0.Kind == 12 && $0.Dto ~}}[{{ WriteFieldValue $0.Dto ("v"+$2) ($2+1) }} for {{ ("v"+$2) }} in {{ $1 }}]{{ else if $0.Kind == 12 && $0.ValueType ~}}[{{ WriteFieldValue $0.ValueType ("v"+$2) ($2+1) }} for {{ ("v"+$2) }} in {{ $1 }}]{{ else ~}}{{ $1 }}{{ end ~}}{{ end # func WriteFieldValue ~}}

{{ func WriteDtoFromDataAssignment # field ~}}
{{ type = $0 | GetFieldType ~}}
{{ if type.Kind == 1 ~}}{{ $0.Name | SnakeCase }}=("{{ $0.Name }}" in data and data["{{ $0.Name }}"] is not False),
{{ else if type.Kind < 8 || type.Kind == 10 ~}}{{ $0.Name | SnakeCase }}=data.get("{{ $0.Name }}"),
{{ else ~}}{{ $0.Name | SnakeCase }}={{ WriteFieldValue type ("data[\"" + $0.Name + "\"]") 1 }} if "{{ $0.Name }}" in data else None,
{{ end ~}}
{{ end # func WriteDtoFromDataAssignment ~}}

{{ func WriteSummaryAndRemarks ~}}
{{ if !$0.Summary.empty? || ($0.Remarks && !$0.Remarks.empty?) ~}}
{{ $1 }}"""
{{ if !$0.Summary.empty? ~}}
{{ $1 }}{{ $0.Summary }}
{{ end ~}}
{{ if !$0.Summary.empty? && ($0.Remarks && !$0.Remarks.empty?) ~}}

{{ end ~}}
{{ if $0.Remarks && !$0.Remarks.empty? ~}}
{{ for line in $0.Remarks ~}}
{{ $1 }}{{ line | regex.replace `\[([^\]]+)\]\(\)` `$1` }}
{{ end ~}}
{{ end ~}}
{{ $1 }}"""
{{ end ~}}
{{ end # func WriteSummaryAndRemarks ~}}

{{ func WriteCodeGenComment ~}}

<!-- {{ CodeGenCommentText }} -->
{{ end # func WriteCodeGenComment ~}}

{{ func WriteNestedFieldTypeToData ~}}
{{ if $0.Dto ~}}
v{{ $1 }}.to_data(){{ else if $0.Kind == 12 && $0.ValueType # Array ~}}
[{{ WriteNestedFieldTypeToData $0.ValueType $1 + 1 ~}}
 for v{{ $1 + 1 }} in v{{ $1 }}]{{ else if $0.Kind == 13 && $0.ValueType # Map ~}}
{k{{ $1 + 1 }}: {{ WriteNestedFieldTypeToData $0.ValueType $1 + 1 ~}}
 for k{{ $1 + 1 }}, v{{ $1 + 1 }} in v{{ $1 }}.items()}{{ else ~}}
v{{ $1 }}{{ end ~}}
{{ end # func WriteNestedFieldTypeToData ~}}

{{ func WriteFieldToData # field [ifelse] ~}}
{{ type = $0 | GetFieldType ~}}
{{ if $1 ~}}{{ ifelse = " if " + ($0.Name | SnakeCase) + " is not None else None" ~}}{{ else ~}}{{ ifelse = "" ~}}{{ end ~}}
{{ if type.Dto ~}}
{{ $0.Name | SnakeCase }}.to_data(){{ ifelse }}{{ else if type.Kind == 12 && type.ValueType # Array ~}}
[{{ WriteNestedFieldTypeToData type.ValueType 1 }} for v1 in {{ $0.Name | SnakeCase }}]{{ ifelse }}{{ else if type.Kind == 13 && type.ValueType # Map ~}}
{k1: {{ WriteNestedFieldTypeToData type.ValueType 1 }} for k1, v1 in {{ $0.Name | SnakeCase }}.items()}{{ ifelse }}{{ else ~}}
{{ $0.Name | SnakeCase }}{{ end ~}}
{{ end # func WriteFieldToData ~}}

{{ func WriteDtoDefinition # dto name fields parentclass ~}}

{{ name = $1 }}
{{ fields = $2 | WhereNotObsolete ~}}
class {{ name }}(facility.{{ if $3 ~}}{{ $3 }}{{ else ~}}DTO{{ end ~}}):
{{ WriteSummaryAndRemarks $0 "    " ~}}
    def __init__(
        self,
{{ for field in fields ~}}
{{ if (field | GetFieldType).Dto ~}}{{ fquote = '"' ~}}{{ else }}{{ fquote = '' ~}}{{ end ~}}
        {{ field.Name | SnakeCase }}: {{ fquote }}{{ field | GetFieldType | RenderFieldTypeDeclaration }}{{ fquote }},
{{ end ~}}
    ):
        """
{{ for field in fields ~}}
        :param {{ field.Name | SnakeCase }}: {{ field.Summary }}
{{ end ~}}
        """
        super().__init__()
{{ for field in fields ~}}
        if not isinstance({{ field.Name | SnakeCase }}, ({{ field | GetFieldType | RenderFieldTypeClass }}, type(None))):
            raise ValueError(f"Invalid {{ field.Name | SnakeCase }}: {{ "{" }}{{ field.Name | SnakeCase }}{{ "}" }}")
        self.{{ field.Name | SnakeCase }} = {{ field.Name | SnakeCase }}
{{ end ~}}

    @classmethod
    def from_data(cls, data: typing.Dict[str, typing.Any]) -> "{{ name }}":
        return {{ name }}(
{{ for field in fields ~}}
            {{ WriteDtoFromDataAssignment field ~}}
{{ end ~}}
        )

{{ end # func WriteDtoDefinition ~}}

{{ func WriteFieldsDict # fields dictname empty [wrap] ~}}
{{ if $0 && !$0.empty? ~}}
{{ noreq = true ~}}
{{ for field in $0 ~}}
{{ if field.ServiceField.IsRequired ~}}
{{ noreq = false ~}}
        if {{ field.ServiceField.Name | SnakeCase }} is None:
            return facility.Result(error=facility.Error(code="InvalidRequest", message="'{{ field.ServiceField.Name | SnakeCase }}' is required."))
{{ end ~}}
{{ end # field in $0 ~}}
{{ if noreq ~}}
        {{ $1 }} = dict()
{{ else ~}}
        {{ $1 }} = {
{{ for field in $0 ~}}
{{ if field.ServiceField.IsRequired ~}}
            "{{ field.ServiceField.Name }}": {{ if $3 ~}}{{ $3 }}({{ end ~}}{{ WriteFieldToData field.ServiceField }}{{ if $3 ~}}){{ end ~}},
{{ end ~}}
{{ end # field in $0 ~}}
        }
{{ end # if noreq else ~}}
{{ for field in $0 ~}}{{ if !field.ServiceField.IsRequired ~}}
        if {{ field.ServiceField.Name | SnakeCase }} is not None:
            {{ $1 }}["{{ field.ServiceField.Name }}"] = {{ if $3 ~}}{{ $3 }}({{ end ~}}{{ WriteFieldToData field.ServiceField }}{{ if $3 ~}}){{ end ~}}

{{ end # if !field.ServiceField.IsRequired ~}}
{{ end # field in $0 ~}}
{{ else # if $0 ~}}
        {{ $1 }} = {{ $2 }}
{{ end # if $0 else ~}}
{{ end # WriteFieldsDict ~}}

{{### Client ### ~}}
==> {{ Service.Name | SnakeCase }}.py
"""
{{ CodeGenCommentText }}

{{ Service.Name }}
{{ if HttpService && HttpService.Url ~}}

URL: [`{{ HttpService.Url }}`]({{ HttpService.Url }})
{{ end # if HttpService && HttpService.Url ~}}

{{ Service.Summary }}
{{ if Service.Remarks && !Service.Remarks.empty? ~}}

{{ for line in Service.Remarks ~}}
{{ line | regex.replace `\[([^\]]+)\]\(\)` `$1` }}
{{ end ~}}
{{ end ~}}
"""

import decimal
import enum
import typing

import facility


{{### Errors ### ~}}
HTTP_STATUS_CODE_TO_ERROR_CODE = {sc: ec for ec, sc in facility.ERROR_CODE_TO_HTTP_STATUS_CODE.items()}
{{ for errorSet in HttpService.ErrorSets ~}}
{{ if !errorSet.ServiceErrorSet.IsObsolete ~}}
{{ for error in errorSet.Errors ~}}
{{ if !error.ServiceError.IsObsolete ~}}
HTTP_STATUS_CODE_TO_ERROR_CODE[{{ error.StatusCode + 0 }}] = "{{ error.StatusCode }}"  # {{ errorSet.ServiceErrorSet.Name }}.{{ error.ServiceError.Name }}{{ if error.ServiceError.Summary ~}}: {{ error.ServiceError.Summary }}{{ end ~}}

{{ end ~}}
{{ end ~}}
{{ end ~}}
{{ end ~}}

{{### Enums ### ~}}
{{ for enum in Service.Enums | WhereNotObsolete ~}}

class {{ enum.Name }}(enum.Enum):
{{ WriteSummaryAndRemarks enum "    " ~}}
{{ for pair in enum.Values | WhereNotObsolete | Enumerate ~}}
    {{ pair.Item2.Name | SnakeCase | ToUpper }} = {{ pair.Item1 + 1 }}  # {{ pair.Item2.Summary }}
{{ end ~}}

{{ end # for enum in Service.Enums ~}}
{{### DTOs ### ~}}
{{ for dto in Service.Dtos | WhereNotObsolete ~}}
{{ WriteDtoDefinition dto (dto.Name | PascalCase) dto.Fields ~}}
{{ end # for dto in Service.Dtos ~}}
{{ for method in Service.Methods | WhereNotObsolete ~}}
{{ WriteDtoDefinition method (method.Name | PascalCase + "Response") method.ResponseFields "Response" ~}}
{{ end # for dto in Service.Dtos ~}}

{{### Client and Methods ### ~}}
class Client(facility.ClientBase):
    def __init__(self,
                 base_uri: str = "{{ if HttpService ~}}{{ HttpService.Url }}{{ end ~}}", *,
                 headers: typing.Optional[typing.Dict[str, str]] = None,
                 oauth: typing.Optional[facility.OAuthSettings] = None,
                 max_retries: int = 0):
        super().__init__(base_uri=base_uri, headers=headers, oauth=oauth, max_retries=max_retries)

{{ for method in Service.Methods | WhereNotObsolete ~}}
{{ http = method | GetHttp ~}}
{{ if method.RequestFields.empty? ~}}
    def {{ method.Name | SnakeCase }}(self) -> facility.Result[{{ method.Name | PascalCase }}Response]:
{{ else }}
    def {{ method.Name | SnakeCase }}(
        self, *,
{{ for field in method.RequestFields ~}}
{{ if field.IsRequired ~}}
        {{ field.Name | SnakeCase }}: {{ field | GetFieldType | RenderFieldTypeDeclaration }},
{{ end ~}}
{{ end ~}}
{{ for field in method.RequestFields ~}}
{{ if !field.IsRequired ~}}
        {{ field.Name | SnakeCase }}: {{ field | GetFieldType | RenderFieldTypeDeclaration }} = None,
{{ end ~}}
{{ end ~}}
    ) -> facility.Result[{{ method.Name | PascalCase }}Response]:
{{ end # if method.RequestFields.empty? ~}}
        """
{{ if method.Summary && !method.Summary.empty? ~}}
        {{ method.Summary }}
{{ end ~}}
{{ if method.Remarks && !method.Remarks.empty? ~}}

{{ for line in method.Remarks ~}}
        {{ line | regex.replace `\[([^\]]+)\]\(\)` `$1` }}
{{ end ~}}
{{ end # if method.Remarks ~}}
{{ if method.RequestFields && !method.RequestFields.empty? ~}}

{{ for field in method.RequestFields ~}}
        :param {{ field.Name | SnakeCase }}: {{ field.Summary }}
{{ end ~}}
{{ end ~}}
        """
{{ if http ~}}
        uri_ = {{ RenderPathAsPythonFString http ~}}

{{ WriteFieldsDict http.QueryFields "query_" "dict()" ~}}
{{ if http.RequestBodyField ~}}
        request_ = {{ WriteFieldToData http.RequestBodyField.ServiceField 1 ~}}

{{ else ~}}
{{ WriteFieldsDict http.RequestNormalFields "request_" "None" ~}}
{{ end # if http.RequestBodyField else ~}}
{{ WriteFieldsDict http.RequestHeaderFields "headers_" "None" "str" ~}}
        response_ = self.send_request("{{ http.Method }}", uri_, query=query_, request=request_, headers=headers_)
{{ for response in http.ValidResponses ~}}
        if response_.status_code == {{ response.StatusCode + 0 }}:  # {{ response.StatusCode | StatusCodePhrase }}
            return facility.Result(value={{ method.Name | PascalCase }}Response.from_response(response_{{ if response.BodyField ~}}, body="{{ response.BodyField.ServiceField.Name | SnakeCase }}"{{ end ~}}))
{{ end # for response ~}}
        return facility.Result(
            error=facility.Error.from_response(response_, HTTP_STATUS_CODE_TO_ERROR_CODE.get(response_.status_code)))
{{ else # if http ~}}
        raise NotImplementedError()
{{ end # if http ... else ~}}
{{ end # for method in Service.Methods | WhereNotObsolete ~}}


# {{ CodeGenCommentText }}