{{ func WriteDtoFromDataAssignment ~}}
{{ if ($0 | GetFieldType).Kind == 12 && ($0 | GetFieldType).ValueType && ($0 | GetFieldType).ValueType.Dto }}{{ $0.Name }}=list(map({{ ($0 | GetFieldType).ValueType.Dto.Name }}.from_data, data["{{$0.Name}}"])) if "{{$0.Name}}" in data else None,
{{ else if ($0 | GetFieldType).Dto }}{{ $0.Name | SnakeCase }}={{ ($0 | GetFieldType).Dto.Name }}.from_data(data["{{$0.Name}}"]) if "{{$0.Name}}" in data else None,
{{ else }}{{ $0.Name | SnakeCase }}=data.get("{{ $0.Name | SnakeCase }}"),
{{ end ~}}
{{ end # func WriteDtoFromDataAssignment ~}}

{{ func WriteSummary ~}}
{{ if !$0.Summary.empty? ~}}

{{ $0.Summary }}
{{ end ~}}
{{ end # func WriteSummary ~}}

{{ func WriteRemarks ~}}
{{ if $0.Remarks && !$0.Remarks.empty? ~}}

{{ for line in $0.Remarks ~}}
{{ line | regex.replace `\[([^\]]+)\]\(\)` `[$1]($1.md)` }}
{{ end ~}}
{{ end ~}}
{{ end # func WriteRemarks ~}}

{{ func WriteSummaryAndRemarks ~}}
{{ if !$0.Summary.empty? || ($0.Remarks && !$0.Remarks.empty?) ~}}
{{ $1 }}"""
{{ if !$0.Summary.empty? ~}}
{{ $1 }}{{ $0.Summary }}
{{ end ~}}
{{ if !$0.Summary.empty? && ($0.Remarks && !$0.Remarks.empty?) ~}}

{{ end ~}}
{{ if $0.Remarks && !$0.Remarks.empty? ~}}
{{ for line in $0.Remarks ~}}
{{ $1 }}{{ line | regex.replace `\[([^\]]+)\]\(\)` `$1` }}
{{ end ~}}
{{ end ~}}
{{ $1 }}"""
{{ end ~}}
{{ end # func WriteSummaryAndRemarks ~}}

{{ func WriteCodeGenComment ~}}

<!-- {{ CodeGenCommentText }} -->
{{ end # func WriteCodeGenComment ~}}

{{ func WriteNestedFieldTypeToData ~}}
{{ if $0.Dto ~}}
v{{ $1 }}.to_data(){{ else if $0.Kind == 12 && $0.ValueType # Array ~}}
[{{ WriteNestedFieldTypeToData $0.ValueType $1 + 1 ~}}
 for v{{ $1 + 1 }} in v{{ $1 }}]{{ else if $0.Kind == 13 && $0.ValueType # Map ~}}
{k{{ $1 + 1 }}: {{ WriteNestedFieldTypeToData $0.ValueType $1 + 1 ~}}
 for k{{ $1 + 1 }}, v{{ $1 + 1 }} in v{{ $1 }}.items()}{{ else ~}}
v{{ $1 }}{{ end ~}}
{{ end # func WriteNestedFieldTypeToData ~}}

{{ func WriteFieldToData ~}}
{{ type = $0 | GetFieldType ~}}
{{ if type.Dto ~}}
{{ $0.Name | SnakeCase }}.to_data(){{ else if type.Kind == 12 && type.ValueType # Array ~}}
[{{ WriteNestedFieldTypeToData type.ValueType 1 }} for v1 in {{ $0.Name | SnakeCase }}]{{ else if type.Kind == 13 && type.ValueType # Map ~}}
{k1: {{ WriteNestedFieldTypeToData type.ValueType 1 }} for k1, v1 in {{ $0.Name | SnakeCase }}.items()}{{ else ~}}
{{ $0.Name | SnakeCase }}{{ end ~}}
{{ end # func WriteFieldToData ~}}

{{ func WriteDtoDefinition # dto name fields ~}}

{{ name = $1 }}
{{ fields = $2 | WhereNotObsolete ~}}
class {{ name }}(facility.DTO):
{{ WriteSummaryAndRemarks $0 "    " ~}}
    def __init__(
        self,
{{ for field in fields ~}}
{{ if (field | GetFieldType).Dto ~}}{{ fquote = '"' ~}}{{ else }}{{ fquote = '' ~}}{{ end ~}}
        {{ field.Name | SnakeCase }}: {{ fquote }}{{ field | GetFieldType | RenderFieldTypeDeclaration }}{{ fquote }},
{{ end ~}}
    ):
        """
{{ for field in fields ~}}
        :param {{ field.Name | SnakeCase }}: {{ field.Summary }}
{{ end ~}}
        """
        super().__init__()
{{ for field in fields ~}}
        if not isinstance({{ field.Name | SnakeCase }}, ({{ field | GetFieldType | RenderFieldTypeClass }}, type(None))):
            raise ValueError(f"Invalid {{ field.Name | SnakeCase }}: {{ "{" }}{{ field.Name | SnakeCase }}{{ "}" }}")
        self.{{ field.Name | SnakeCase }} = {{ field.Name | SnakeCase }}
{{ end ~}}

    @staticmethod
    def from_data(data: typing.Dict[str, typing.Any]) -> "{{ name }}":
        return {{ name }}(
{{ for field in fields ~}}
            {{ WriteDtoFromDataAssignment field ~}}
{{ end ~}}
        )

{{ end # func WriteDtoDefinition ~}}

{{ func WriteFieldsDict # fields dictname empty ~}}
{{ if $0 && !$0.empty? ~}}
{{ noreq = true ~}}{{ for field in $0 ~}}{{ if field.IsRequired ~}}{{ noreq = false ~}}{{ end ~}}{{ end ~}}
{{ if noreq ~}}
        {{ $1 }} = dict()
{{ else ~}}
        {{ $1 }} = {
{{ for field in $0 ~}}
{{ if field.IsRequired ~}}
            "{{ field.ServiceField.Name }}": {{ WriteFieldToData field.ServiceField }},
{{ end ~}}
{{ end # field in $0 ~}}
        }
{{ end # if noreq else ~}}
{{ for field in $0 ~}}{{ if !field.IsRequired ~}}
        if {{ field.ServiceField.Name | SnakeCase }} is not None:
            {{ $1 }}["{{ field.ServiceField.Name }}"] = {{ WriteFieldToData field.ServiceField }}
{{ end # if !field.IsRequired ~}}
{{ end # field in $0 ~}}
{{ else # if $0 ~}}
        {{ $1 }} = {{ $2 }}
{{ end # if $0 else ~}}
{{ end # WriteFieldsDict ~}}

{{### Client ### ~}}
==> {{ Service.Name }}.py
"""
{{ CodeGenCommentText }}

{{ Service.Name }}
{{ if HttpService && HttpService.Url ~}}

URL: [`{{ HttpService.Url }}`]({{ HttpService.Url }})
{{ end # if HttpService && HttpService.Url ~}}

{{ Service.Summary }}
{{ if Service.Remarks && !Service.Remarks.empty? ~}}

{{ for line in Service.Remarks ~}}
{{ line | regex.replace `\[([^\]]+)\]\(\)` `$1` }}
{{ end ~}}
{{ end ~}}
"""

import decimal
import enum
import typing
from urllib.parse import quote as uri_encode

import facility


{{### Errors ### ~}}
HTTP_STATUS_CODE_TO_ERROR_CODE = {sc: ec for ec, sc in facility.ERROR_CODE_TO_HTTP_STATUS_CODE.items()}
{{ for errorSet in HttpService.ErrorSets ~}}
{{ if !errorSet.ServiceErrorSet.IsObsolete ~}}
{{ for error in errorSet.Errors ~}}
{{ if !error.ServiceError.IsObsolete ~}}
HTTP_STATUS_CODE_TO_ERROR_CODE[{{ error.StatusCode + 0 }}] = "{{ error.StatusCode }}"  # {{ errorSet.ServiceErrorSet.Name }}.{{ error.ServiceError.Name }}{{ if error.ServiceError.Summary ~}}: {{ error.ServiceError.Summary }}{{ end ~}}

{{ end ~}}
{{ end ~}}
{{ end ~}}
{{ end ~}}

{{### Enums ### ~}}
{{ for enum in Service.Enums | WhereNotObsolete ~}}

class {{ enum.Name }}(enum.Enum):
{{ WriteSummaryAndRemarks enum "    " ~}}
{{ for pair in enum.Values | WhereNotObsolete | Enumerate ~}}
    {{ pair.Item2.Name | SnakeCase | ToUpper }} = {{ pair.Item1 + 1 }}  # {{ pair.Item2.Summary }}
{{ end ~}}

{{ end # for enum in Service.Enums ~}}
{{### DTOs ### ~}}
{{ for dto in Service.Dtos | WhereNotObsolete ~}}
{{ WriteDtoDefinition dto (dto.Name | PascalCase) dto.Fields ~}}
{{ end # for dto in Service.Dtos ~}}
{{ for method in Service.Methods | WhereNotObsolete ~}}
{{ WriteDtoDefinition method (method.Name | PascalCase + "Response") method.ResponseFields ~}}
{{ end # for dto in Service.Dtos ~}}

{{### Client and Methods ### ~}}
class Client(facility.ClientBase):
    def __init__(self,
                 base_uri: str = "{{ if HttpService ~}}{{ HttpService.Url }}{{ end ~}}", *,
                 headers: typing.Optional[typing.Dict[str, str]] = None,
                 oauth: typing.Optional[facility.OAuthSettings] = None,
                 max_retries: int = 0):
        super().__init__(base_uri=base_uri, headers=headers, oauth=oauth, max_retries=max_retries)

{{ for method in Service.Methods | WhereNotObsolete ~}}
{{ http = method | GetHttp ~}}
{{ if method.RequestFields.empty? ~}}
    def {{ method.Name | SnakeCase }}(self) -> facility.Result[{{ method.Name | PascalCase }}Response]:
{{ else }}
    def {{ method.Name | SnakeCase }}(
        self, *,
{{ for field in method.RequestFields ~}}
{{ if field.IsRequired ~}}
        {{ field.Name | SnakeCase }}: {{ field | GetFieldType | RenderFieldTypeDeclaration }},
{{ end ~}}
{{ end ~}}
{{ for field in method.RequestFields ~}}
{{ if !field.IsRequired ~}}
        {{ field.Name | SnakeCase }}: {{ field | GetFieldType | RenderFieldTypeDeclaration }} = None,
{{ end ~}}
{{ end ~}}
    ) -> facility.Result[{{ method.Name | PascalCase }}Response]:
{{ end # if method.RequestFields.empty? ~}}
        """
{{ if method.Summary && !method.Summary.empty? ~}}
        {{ method.Summary }}
{{ end ~}}
{{ if method.Remarks && !method.Remarks.empty? ~}}

{{ for line in method.Remarks ~}}
        {{ line | regex.replace `\[([^\]]+)\]\(\)` `$1` }}
{{ end ~}}
{{ end # if method.Remarks ~}}
{{ if method.RequestFields && !method.RequestFields.empty? ~}}

{{ for field in method.RequestFields ~}}
        :param {{ field.Name | SnakeCase }}: {{ field.Summary }}
{{ end ~}}
{{ end ~}}
        """
{{ if http ~}}
        uri_ = {{ RenderPathAsPythonFString http ~}}

{{ WriteFieldsDict http.QueryFields "query_" "dict()" ~}}
{{ if http.RequestBodyField ~}}
        request_ = {{ http.RequestBodyField.ServiceField.Name | SnakeCase }}
{{ else ~}}
{{ WriteFieldsDict http.RequestNormalFields "request_" "None" ~}}
{{ end # if http.RequestBodyField else ~}}
{{ WriteFieldsDict http.RequestHeaderFields "headers_" "None" ~}}
        response_ = self.send_request("{{ http.Method }}", uri_, query=query_, request=request_, headers=headers_)
{{ for response in http.ValidResponses ~}}
        if response_.status_code == {{ response.StatusCode + 0 }}:  # {{ response.StatusCode | StatusCodePhrase }}
            return facility.Result(value={{ method.Name | PascalCase }}Response.from_data(response_.json()))
{{ end # for response ~}}
        return facility.Result(
            error=facility.Error.from_response(response_, HTTP_STATUS_CODE_TO_ERROR_CODE.get(response_.status_code)))
{{ else # if http ~}}
        raise NotImplementedError()
{{ end # if http ... else ~}}
{{ end # for method in Service.Methods | WhereNotObsolete ~}}


# {{ CodeGenCommentText }}
{{### Service ### ~}}
==> {{ Service.Name }}.md

# {{ Service.Name }}
{{ WriteSummary Service ~}}
{{ if HttpService && HttpService.Url ~}}

URL: [`{{ HttpService.Url }}`]({{ HttpService.Url }})
{{ end # if HttpService && HttpService.Url ~}}
{{ if !Service.Methods.empty? ~}}
{{ if HttpService ~}}

| method | path | description |
| --- | --- | --- |
{{ for method in HttpService.Methods | WhereNotObsolete ~}}
| [{{ method.ServiceMethod.Name }}]({{ Service.Name }}/{{ method.ServiceMethod.Name }}.md) | `{{ method.Method }} {{ method.Path }}` | {{ method.ServiceMethod.Summary }} |
{{ end ~}}
{{ else # if HttpService ~}}

| method | description |
| --- | --- |
{{ for method in Service.Methods | WhereNotObsolete ~}}
| [{{ method.Name }}]({{ Service.Name }}/{{ method.Name }}.md) | {{ method.Summary }} |
{{ end ~}}
{{ end # else ~}}
{{ end # if !Service.Methods.empty? ~}}
{{ if !Service.Dtos.empty? ~}}

| data | description |
| --- | --- |
{{ for dto in Service.Dtos | WhereNotObsolete ~}}
| [{{ dto.Name }}]({{ Service.Name }}/{{ dto.Name }}.md) | {{ dto.Summary }} |
{{ end ~}}
{{ end # if !Service.Dtos.empty? ~}}
{{ if !Service.Enums.empty? ~}}

| enum | description |
| --- | --- |
{{ for enum in Service.Enums | WhereNotObsolete ~}}
| [{{ enum.Name }}]({{ Service.Name }}/{{ enum.Name }}.md) | {{ enum.Summary }} |
{{ end ~}}
{{ end # if !Service.Enums.empty? ~}}
{{ if !Service.ErrorSets.empty? ~}}

| errors | description |
| --- | --- |
{{ for errorSet in Service.ErrorSets | WhereNotObsolete ~}}
| [{{ errorSet.Name }}]({{ Service.Name }}/{{ errorSet.Name }}.md) | {{ errorSet.Summary }} |
{{ end ~}}
{{ end # if !Service.ErrorSets.empty? ~}}
{{ WriteRemarks Service ~}}
{{ WriteCodeGenComment ~}}

{{### Methods ### ~}}
{{ for method in Service.Methods | WhereNotObsolete ~}}

==> {{ Service.Name }}/{{ method.Name }}.md

# {{ method.Name }}
{{ WriteSummary method ~}}
{{ http = method | GetHttp ~}}
{{ if http ~}}

```
{{ http.Method }} {{ http.Path }}
{{ for field in http.QueryFields | WhereNotObsolete ~}}
  {{ if for.first; '?'; else; '&'; end }}{{ field.Name }}={{ '{' + field.ServiceField.Name + '}' }}
{{ end ~}}
{{ for field in http.RequestHeaderFields | WhereNotObsolete ~}}
{{ field.Name }}: ({{ field.ServiceField.Name }})
{{ end ~}}
{{ if http.RequestBodyField ~}}
({{ http.RequestBodyField.ServiceField.Name }})
{{ else if !http.RequestNormalFields.empty? ~}}
{
{{ for field in http.RequestNormalFields | WhereNotObsolete ~}}
  "{{ field.ServiceField.Name }}": {{ field.ServiceField | GetFieldType | RenderFieldTypeAsJsonValue }}{{ if !for.last; ','; end }}
{{ end ~}}
}
{{ end # if else if ~}}
{{ if !http.ResponseHeaderFields.empty? ~}}
--- response
{{ for field in http.ResponseHeaderFields | WhereNotObsolete ~}}
{{ field.Name }}: ({{ field.ServiceField.Name }})
{{ end ~}}
{{ end # if !http.ResponseHeaderFields.empty? ~}}
{{ for response in http.ValidResponses ~}}
--- {{ response.StatusCode + 0 }} {{ response.StatusCode | StatusCodePhrase }}
{{ if response.BodyField ~}}
({{ if (response.BodyField.ServiceField | GetFieldType).Kind == 'Boolean'; 'if '; end }}{{ response.BodyField.ServiceField.Name }})
{{ else if !response.NormalFields.empty? ~}}
{
{{ for field in response.NormalFields | WhereNotObsolete ~}}
  "{{ field.ServiceField.Name }}": {{ field.ServiceField | GetFieldType | RenderFieldTypeAsJsonValue }}{{ if !for.last; ','; end }}
{{ end ~}}
}
{{ end # if else if ~}}
{{ end # for response in http.ValidResponses ~}}
```
{{ end # if http ~}}
{{ requestFields = method.RequestFields | WhereNotObsolete ~}}
{{ if !requestFields.empty? ~}}

| request | type | description |
| --- | --- | --- |
{{ for field in requestFields ~}}
| {{ field.Name }} | {{ field | GetFieldType | RenderFieldType }} | {{ field.Summary }} |
{{ end ~}}
{{ end # if !requestFields.empty? ~}}
{{ responseFields = method.ResponseFields | WhereNotObsolete ~}}
{{ if !responseFields.empty? ~}}

| response | type | description |
| --- | --- | --- |
{{ for field in responseFields ~}}
| {{ field.Name }} | {{ field | GetFieldType | RenderFieldType }} | {{ field.Summary }} |
{{ end ~}}
{{ end # if !requestFields.empty? ~}}
{{ WriteRemarks method ~}}
{{ WriteCodeGenComment ~}}
{{ end # for method in Service.Methods | WhereNotObsolete ~}}

{{### DTOs ### ~}}
{{ for dto in Service.Dtos | WhereNotObsolete ~}}

==> {{ Service.Name }}/{{ dto.Name }}.md

# {{ dto.Name }}
{{ WriteSummary dto ~}}
{{ fields = dto.Fields | WhereNotObsolete ~}}
{{ if HttpService ~}}

```
{
{{ for field in fields ~}}
  "{{ field.Name }}": {{ field | GetFieldType | RenderFieldTypeAsJsonValue }}{{ if !for.last; ','; end }}
{{ end ~}}
}
```
{{ end # if HttpService ~}}
{{ if !fields.empty? ~}}

| field | type | description |
| --- | --- | --- |
{{ for field in fields ~}}
| {{ field.Name }} | {{ field | GetFieldType | RenderFieldType }} | {{ field.Summary }} |
{{ end ~}}
{{ end # if !fields.empty? ~}}
{{ WriteRemarks dto ~}}
{{ WriteCodeGenComment ~}}
{{ end # for dto in Service.Dtos | WhereNotObsolete ~}}

{{### Enums ### ~}}
{{ for enum in Service.Enums | WhereNotObsolete ~}}

==> {{ Service.Name }}/{{ enum.Name }}.md

# {{ enum.Name }}
{{ WriteSummary enum ~}}

| name | description |
| --- | --- |
{{ for value in enum.Values | WhereNotObsolete ~}}
| {{ value.Name }} | {{ value.Summary }} |
{{ end ~}}
{{ WriteRemarks enum ~}}
{{ WriteCodeGenComment ~}}
{{ end # for enum in Service.Enums | WhereNotObsolete ~}}

{{### Error Sets ### ~}}
{{ for errorSet in Service.ErrorSets | WhereNotObsolete ~}}

==> {{ Service.Name }}/{{ errorSet.Name }}.md

# {{ errorSet.Name }}
{{ WriteSummary errorSet ~}}

| error | description |
| --- | --- |
{{ for error in errorSet.Errors | WhereNotObsolete ~}}
| {{ error.Name }} | {{ error.Summary }} |
{{ end ~}}
{{ WriteRemarks errorSet ~}}
{{ WriteCodeGenComment ~}}
{{ end # for errorSet in Service.ErrorSets | WhereNotObsolete ~}}
